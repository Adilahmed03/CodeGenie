Prompt: write a program for amstrong in C++


Language: C++
Timestamp: 2025-03-09 00:20:18
User: adil

--- Generated Code ---

#include <iostream>
            #include <cmath>

            using namespace std;

            int power(int base, int exponent) {
                int result = 1;
                for (int i = 0; i < exponent; i++) {
                    result *= base;
                }
                return result;
            }

            bool isAmstrong(int number) {
                int originalNumber = number;
                int sum = 0;

                while (number > 0) {
                    int digit = number % 10;
                    sum += power(digit, static_cast<int>(log10(static_cast<double>(originalNumber)) + 1));
                    number /= 10;
                }

                return sum == originalNumber;
            }

            int main() {
                int number;
                cout << "Enter a number: ";
                cin >> number;

                if (isAmstrong(number)) {
                    cout << number << " is an Armstrong number." << endl;
                } else {
                    cout << number << " is not an Armstrong number." << endl;
                }

                return 0;
            }


            DESCRIPTION:
            This code defines a C++ function `isAmstrong` that checks if a given number is an Armstrong number or not. An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the total number of digits.

            The program starts by including the necessary imports: `<iostream>` for input/output operations and `<cmath>` for the `power` function. The `using namespace std;` statement is used for convenience.

            The `power` function calculates the power of a given base to a given exponent using a simple loop.

            The `isAmstrong` function takes an integer as an argument and initializes the `originalNumber` variable with the input number. It initializes the `sum` variable to 0 and then calculates the sum of the digits raised to the power of the total number of dig